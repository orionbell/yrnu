import{_ as a,c as i,o as t,ae as o}from"./chunks/framework.tuuL-SzM.js";const g=JSON.parse('{"title":"Yrnu global","description":"","frontmatter":{},"headers":[],"relativePath":"yrnu_global.md","filePath":"yrnu_global.md"}'),l={name:"yrnu_global.md"};function n(r,e,s,c,d,u){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="yrnu-global" tabindex="-1">Yrnu global <a class="header-anchor" href="#yrnu-global" aria-label="Permalink to &quot;Yrnu global&quot;">​</a></h1><p>The <code>yrnu</code> global provides many useful functions for executing, saving and managing configurations</p><h3 id="executing-configuration-on-local-or-remote-machines" tabindex="-1">Executing configuration on local or remote machines <a class="header-anchor" href="#executing-configuration-on-local-or-remote-machines" aria-label="Permalink to &quot;Executing configuration on local or remote machines&quot;">​</a></h3><h4 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run&quot;">​</a></h4><p>Runs the giving configuration on a remote machine <strong>Arguments:</strong></p><ul><li>host - <code>String</code></li><li>config - <code>String</code></li><li>auth - <code>Table</code> (for more details see below) - <em>optional</em></li><li>port - <code>Number</code> - <em>optional</em></li></ul><h5 id="auth-table" tabindex="-1">Auth table <a class="header-anchor" href="#auth-table" aria-label="Permalink to &quot;Auth table&quot;">​</a></h5><p>The auth table specifies how to authenticate against the remote machine using SSH. There are 4 ways to authenticate, And those are:</p><ul><li><strong>Arguments</strong>: By providing the <code>username</code> and <code>password</code> as arguments to the <code>Auth table</code>.</li><li><strong>Stdin</strong>: By asking the user directly for <code>username</code> and <code>password</code> (This is the default behavior when auth table not passed).</li><li><strong>Key pairs</strong>: By providing the <code>Path</code> to the <code>public</code> and <code>private</code> keys.</li><li><strong>Agent</strong>: By providing an agent name to the <code>Auth table</code>.</li></ul><h6 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h6><p>To authenticate using the <code>Arguments</code> way use:</p><ul><li>username - <code>String</code></li><li>password - <code>String</code> To authenticate using the <code>Key pairs</code> way use:</li><li>username - <code>String</code></li><li>keys - <code>Table</code><ul><li>private - <code>String</code></li><li>public - <code>String</code> To authenticate using the <code>Agent</code> way use:</li></ul></li><li>agent - <code>String</code></li></ul><p><strong>Returns:</strong> <code>Table</code> - in case of a single command it returns a <code>result</code> (see below) table, in case of multiple commands it returns an array of <code>result</code> tables one for each command</p><h5 id="result-table" tabindex="-1">Result table <a class="header-anchor" href="#result-table" aria-label="Permalink to &quot;Result table&quot;">​</a></h5><h6 id="fields-1" tabindex="-1">Fields <a class="header-anchor" href="#fields-1" aria-label="Permalink to &quot;Fields&quot;">​</a></h6><ul><li>success - <code>Bool</code></li><li>status_code - <code>Number</code></li><li>output - <code>String</code></li><li>stdout - <code>String</code></li><li>stderr - <code>String</code></li></ul><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><hr><h4 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec&quot;">​</a></h4><p>Runs the giving configuration on the local machine <strong>Arguments:</strong></p><ul><li>config - <code>String</code></li><li>options - <code>Table</code> (for more details see below) - <em>optional</em></li></ul><h5 id="options-table" tabindex="-1">Options table <a class="header-anchor" href="#options-table" aria-label="Permalink to &quot;Options table&quot;">​</a></h5><ul><li>shell - <code>String</code> - the shell to use to run the commands</li><li>stdin - <code>String</code> - string to pass to the command as the stdin <strong>Returns:</strong> <code>Table</code> - in case of a single command it returns a <code>result</code> (see below) table, in case of multiple commands it returns an array of <code>result</code> tables one for each command</li></ul><h5 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="matching-specific-syntax-using-regex" tabindex="-1">Matching specific syntax using Regex <a class="header-anchor" href="#matching-specific-syntax-using-regex" aria-label="Permalink to &quot;Matching specific syntax using Regex&quot;">​</a></h3><h4 id="reg-match" tabindex="-1">reg_match <a class="header-anchor" href="#reg-match" aria-label="Permalink to &quot;reg_match&quot;">​</a></h4><h3 id="serializing-and-deserializing-data" tabindex="-1">Serializing and Deserializing data <a class="header-anchor" href="#serializing-and-deserializing-data" aria-label="Permalink to &quot;Serializing and Deserializing data&quot;">​</a></h3><h4 id="serialize" tabindex="-1">serialize <a class="header-anchor" href="#serialize" aria-label="Permalink to &quot;serialize&quot;">​</a></h4><h4 id="deserialize" tabindex="-1">deserialize <a class="header-anchor" href="#deserialize" aria-label="Permalink to &quot;deserialize&quot;">​</a></h4>',31)]))}const m=a(l,[["render",n]]);export{g as __pageData,m as default};
